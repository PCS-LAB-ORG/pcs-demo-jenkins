pipeline {
    agent {label "docker"}

// Declare Pipeline Environment Variables
    environment {
        LOCAL_DOCKER_IMAGE_REPO="pcs-jenkins-demo/jenkins-log4j"
        LOCAL_DOCKER_IMAGE_TAG="0.3"
        GITHUB_REPO_URL="https://github.com/PCS-LAB-ORG/pcs-demo-jenkins.git"
	IMAGE_SCAN_RESULTS_FILE="prisma-cloud-image-scan-results.json"
    }

//BEGIN Pipeline Actions / Stages
    stages 	{

//Stage 1 - Display alll of the declared envrionment variables for troubleshooting and learning purposes       
        stage("Environment Variables") {
        steps {
                script {
                    // Echo global environment variables set for the registry configuration
                    echo "LOCAL_DOCKER_IMAGE_REPO=${LOCAL_DOCKER_IMAGE_REPO}"
                    echo "LOCAL_DOCKER_IMAGE_TAG=${LOCAL_DOCKER_IMAGE_TAG}"
                    echo "GITHUB_REPO_URL=${env.GITHUB_REPO_URL}"
		    echo "IMAGE_SCAN_RESULTS_FILE=${IMAGE_SCAN_RESULTS_FILE}"
                	}
        	}
        				}


//Stage 4 - Build a docker image on the local host using repository and tag names defined by environment variables
        stage('Container Image Build') {
        steps {
                // Build an image for scanning
                sh 'docker build --no-cache -t ${LOCAL_DOCKER_IMAGE_REPO}:${LOCAL_DOCKER_IMAGE_TAG} .'
        	}
        				}			

//Stage 5 - Use the Prisma Cloud Plugin to scan the built docker image
        stage('Prisma Cloud Container Image Scan') {
        steps {
                // Scan the built docker image specified by the environment variables
                prismaCloudScanImage ca: '', 
                    cert: '',
                    dockerAddress: 'unix:///var/run/docker.sock',
                    image: "${env.LOCAL_DOCKER_IMAGE_REPO}:${env.LOCAL_DOCKER_IMAGE_TAG}",
                    key: '',
                    logLevel: 'info',
                    podmanPath: '',
                    project: '',
                    resultsFile: "${env.IMAGE_SCAN_RESULTS_FILE}",
                    sbom: '',
                    ignoreImageBuildTime: true
        	}
        					}

}
// END Stages 

post {
    always {
	prismaCloudPublish resultsFilePattern: "${env.IMAGE_SCAN_RESULTS_FILE}"
			}
    }


// END Pipeline
}
