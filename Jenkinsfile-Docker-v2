pipeline {
    agent {label "docker"}

// Declare Pipeline Environment Variables
    environment {
        AWS_ACCOUNT_ID="886388100502"
        AWS_DEFAULT_REGION="us-east-1"
        JENKINS_AWS_CREDENTIAL_NAME="aws-ecr-cred-v2"
        LOCAL_DOCKER_IMAGE_REPO="pcs-jenkins-demo/jenkins-log4j"
        LOCAL_DOCKER_IMAGE_TAG="0.3"
        ECR_IMAGE_TAG="0.3"
        ECR_IMAGE_REPO_NAME="pcs-ecr-demo/jenkins-log4j"
        ECR_SERVER="ecr:${env.AWS_DEFAULT_REGION}"
        ECR_DOCKER_CREDENTIAL="${env.ECR_SERVER}:${env.JENKINS_AWS_CREDENTIAL_NAME}"
        ECR_REPOSITORY_URL="https://${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
        GITHUB_REPO_URL="https://github.com/PCS-LAB-ORG/pcs-demo-jenkins.git"
        CODE_REPO_SCAN_NAME="PCS Demo Log4J Code"
    }

//BEGIN Pipeline Actions / Stages
    stages 	{

//Stage 1 - Display alll of the declared envrionment variables for troubleshooting and learning purposes       
        stage("Environment Variables") {
        steps {
                script {
                    // Echo global environment variables set for the registry configuration
                    echo "JENKINS_AWS_CREDENTIAL_NAME=${env.JENKINS_AWS_CREDENTIAL_NAME}"
                    echo "AWS_ACCOUNT_ID=${env.AWS_ACCOUNT_ID}"
                    echo "AWS_DEFAULT_REGION=${env.AWS_DEFAULT_REGION}"
                    echo "LOCAL_DOCKER_IMAGE_REPO=${LOCAL_DOCKER_IMAGE_REPO}"
                    echo "LOCAL_DOCKER_IMAGE_TAG=${LOCAL_DOCKER_IMAGE_TAG}"
                    echo "ECR_IMAGE_TAG=${env.ECR_IMAGE_TAG}"
                    echo "ECR_IMAGE_REPO_NAME=${env.ECR_IMAGE_REPO_NAME}"
                    echo "ECR_IMAGE_REPO_NAME=${env.IMAGE_REPO_NAME}"
                    echo "ECR_SERVER=${env.ECR_SERVER}"
                    echo "ECR_REPOSITORY_URL=${env.ECR_REPOSITORY_URL}"
                    echo "ECR_DOCKER_CREDENTIALL=${env.ECR_DOCKER_CREDENTIAL}"
                    echo "GITHUB_REPO_URL=${env.GITHUB_REPO_URL}"
                	}
        	}
        				}


//Stage 4 - Build a docker image on the local host using repository and tag names defined by environment variables
        stage('Container Image Build') {
        steps {
                // Build an image for scanning
                sh 'docker build --no-cache -t ${LOCAL_DOCKER_IMAGE_REPO}:${LOCAL_DOCKER_IMAGE_TAG} .'
        	}
        				}			

//Stage 5 - Use the Prisma Cloud Plugin to scan the built docker image
        stage('Prisma Cloud Container Image Scan') {
        steps {
                // Scan the built docker image specified by the environment variables
                prismaCloudScanImage ca: '', 
                    cert: '',
                    dockerAddress: 'unix:///var/run/docker.sock',
                    image: "${env.LOCAL_DOCKER_IMAGE_REPO}:${env.LOCAL_DOCKER_IMAGE_TAG}",
                    key: '',
                    logLevel: 'info',
                    podmanPath: '',
                    project: '',
                    resultsFile: 'prisma-cloud-scan-results.json',
                    sbom: '',
                    ignoreImageBuildTime: true
        	}
        					}

        post {
            always {
                prismaCloudPublish resultsFilePattern: 'prisma-cloud-image-scan-results.json'
			        }
            }

}
// END Stages 

// END Pipeline
}
